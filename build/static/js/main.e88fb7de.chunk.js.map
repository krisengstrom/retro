{"version":3,"sources":["PostIt.js","BoardArea.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["PostIt","className","this","props","type","onClick","delete","text","React","Component","BoardArea","state","postits","add","bind","e","preventDefault","setState","concat","inputNode","value","console","log","child","replace","item","push","notes","map","title","onSubmit","autoComplete","placeholder","ref","node","Board","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OAmBeA,E,iLAXH,IAAD,OACP,OAAO,yBAAKC,UAAS,kBAAaC,KAAKC,MAAMC,OAC/C,4BAAQH,UAAU,SAASI,QAAS,kBAAM,EAAKF,MAAMG,OAAO,EAAKH,SAAjE,KACG,yBAAKF,UAAU,WACbC,KAAKC,MAAMI,W,GAVGC,IAAMC,WCwDZC,E,YArDb,WAAYP,GAAQ,IAAD,8BACjB,4CAAMA,KAEDQ,MAAQ,CACZC,QAAS,IAGV,EAAKC,IAAM,EAAKA,IAAIC,KAAT,gBACX,EAAKR,OAAS,EAAKA,OAAOQ,KAAZ,gBARG,E,iEAYfC,GACHA,EAAEC,iBACFd,KAAKe,SAAS,CAAC,QAAWf,KAAKS,MAAMC,QAAQM,OAAO,CACnDX,KAAML,KAAKiB,UAAUC,UAEtBC,QAAQC,IAAIpB,KAAKS,OACjBT,KAAKiB,UAAUC,MAAQ,K,6BAGjBG,GACNF,QAAQC,IAAIC,GACZ,IAAIC,EAAU,GAFD,uBAGb,YAAiBtB,KAAKS,MAAMC,QAA5B,+CAAqC,CAAC,IAA7Ba,EAA4B,QAChCA,EAAKlB,OAASgB,EAAMhB,MACvBiB,EAAQE,KAAKD,IALF,kFAQbvB,KAAKe,SAAS,CAAC,QAAWO,M,+BAGjB,IAAD,OAEFG,EAAQzB,KAAKS,MAAMC,QAAQgB,KAAI,SAACH,GAAD,OACpC,kBAAC,EAAD,CAAQrB,KAAMqB,EAAKrB,KAAMG,KAAMkB,EAAKlB,KAAMD,OAAQ,EAAKA,YAGxD,OACD,yBAAKL,UAAS,oBAAeC,KAAKC,MAAMC,OACvC,4BAAKF,KAAKC,MAAM0B,OAChB,0BAAMC,SAAU5B,KAAKW,IAAKkB,aAAa,OACtC,2BAAO3B,KAAK,OAAO4B,YAAY,+BAA+BC,IAAK,SAAAC,GAAI,OAAK,EAAKf,UAAYe,KAC7F,sCAEAP,O,GA/CoBnB,IAAMC,WCiBf0B,E,iLAVX,OACC,yBAAKlC,UAAU,SACd,kBAAC,EAAD,CAAWG,KAAK,OAAOyB,MAAM,oBAC7B,kBAAC,EAAD,CAAWzB,KAAK,MAAMyB,MAAM,wBAC5B,kBAAC,EAAD,CAAWzB,KAAK,QAAQyB,MAAM,e,GAXhBrB,IAAMC,WCeX2B,E,iLAPX,OACE,kBAAC,EAAD,U,GARY5B,IAAMC,WCQJ4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.e88fb7de.chunk.js","sourcesContent":["import React from 'react';\n\nclass PostIt extends React.Component {\n\n  // constructor(props) {\n  //   super(props);\n  // }\n\n  render() {\n    return <div className={`post-it ${this.props.type}`}>\n\t\t<button className=\"delete\" onClick={() => this.props.delete(this.props)}>X</button>\n    \t<div className=\"content\">\n    \t\t{this.props.text}\n    \t</div>\n    </div>;\n  }\n\n}\n\nexport default PostIt;","import React from 'react';\nimport PostIt from './PostIt.js';\n\nclass BoardArea extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n    \tpostits: []\n\t  }\n\n    this.add = this.add.bind(this);\n    this.delete = this.delete.bind(this);\n\n  }\n\n  add(e) {\n  \te.preventDefault();\n  \tthis.setState({'postits': this.state.postits.concat({\n  \t\ttext: this.inputNode.value\n  \t})});\n  \tconsole.log(this.state);\n  \tthis.inputNode.value = '';\n  }\n\n  delete(child) {\n  \tconsole.log(child);\n  \tlet replace = [];\n  \tfor (let item of this.state.postits) {\n  \t\tif (item.text !== child.text) {\n  \t\t\treplace.push(item);\n  \t\t}\n  \t}\n  \tthis.setState({'postits': replace});\n  }\n\n  render() {\n\n  \tconst notes = this.state.postits.map((item) => \n  \t\t<PostIt type={item.type} text={item.text} delete={this.delete}/>\n  \t);\n\n  \treturn (\n\t\t<div className={`sub-board ${this.props.type}`}>\n\t\t\t<h2>{this.props.title}</h2>\n\t\t\t<form onSubmit={this.add} autoComplete=\"off\">\n\t\t\t\t<input type=\"text\" placeholder=\"Type something and hit enter\" ref={node => (this.inputNode = node)}/>\n\t\t\t\t<button>+</button>\n\t\t\t</form>\n\t\t\t{notes}\n\t\t</div>\n    );\n\n  }\n\n}\n\nexport default BoardArea;","import React from 'react';\nimport BoardArea from './BoardArea.js';\n\nclass Board extends React.Component {\n\n  // constructor(props) {\n  //   super(props);\n  // }\n\n  render() {\n    return (\n    \t<div className=\"board\">\n    \t\t<BoardArea type='good' title='What went well?'/>\n    \t\t<BoardArea type='bad' title='What didnt go well?'/>\n    \t\t<BoardArea type='other' title='Other'/>\n    \t</div>);\n  }\n\n}\n\nexport default Board;","import React from 'react';\nimport './App.css';\nimport Board from './Board.js';\n\nclass App extends React.Component {\n\n  // constructor(props) {\n  //   super(props);\n  // }\n\n  render() {\n    return (\n      <Board/>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}